<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>

/**************************************

	이 파일은 자동 생성되는 파일입니다.
		절대 직접 수정하지마세요.

**************************************/

<#
	// 0: 패킷 이름
	// 1: 패킷 사이즈 
	// 2: 패킷 아이디
	// 3: 멤버 변수
	string PacketClassFormat = 
	@"
    public class {0} : PacketBase
    {{
        public override ushort PacketId => Id;

        public override ushort PacketSize => {1};
        public const ushort Id = {2};

		{3}
    }}
	";

	// 0: 타입
	// 1: 이름
	string MemberFormat = 
	@"
		public {0} {1};
	";

	// 0: 변수이름
	string intSize =  @"SizeOf({0})";

	// 0: 변수이름
	string uintSize = @"SizeOf({0})";

	// 0: 변수이름
	string shortSize = @"SizeOf({0})";

	// 0: 변수이름
	string ushortSize = @"SizeOf({0})";

	// 0: 변수이름
	string charSize = @"SizeOf({0})";

	// 0: 변수이름
	string longSize = @"SizeOf({0})";

	// 0: 변수이름
	string ulongSize = @"SizeOf({0})";

	// 0: 변수이름
	string boolSize = @"SizeOf({0})";

	// 0: 변수이름
	string doubleSize = @"SizeOf({0})";

	// 0: 변수이름
	string floatSize = @"SizeOf({0})";

	// 0: 변수이름
	string DateTimeSize = @"sizeof(long)";

	// 0: 변수이름
	string StringSize = @"sizeof(int) + Encoding.UTF8.GetByteCount({0})";

	// 0: 변수이름
	// 1: 원소타입
	string ListSize = @"sizeof(int) + ({0}.Aggregate(0, (int accum, {1} curr) => {{ return accum + AdamBitConverter.SizeOf(curr); }}))";

	// 0: 변수이름
	// 1: 키타입
	// 2: 값타입
	string DictionarySize = @"sizeof(int) + ({0}.Aggregate(0, (int accum, KeyValuePair<{1}, {2}> curr) => {{ return accum + (AdamBitConverter.SizeOf(curr.Key) + AdamBitConverter.SizeOf(curr.Value)); }}))";

	Dictionary<string, string> TypeToSize = new Dictionary<string, string>()
	{
		{ "int", intSize },
		{ "uint", uintSize },
		{ "short", shortSize },
		{ "ushort", ushortSize },
		{ "char", charSize },
		{ "long", longSize },
		{ "ulong", ulongSize },
		{ "float", floatSize },
		{ "double", doubleSize },
		{ "bool", boolSize },
		{ "string", StringSize },
		{ "DateTime", DateTimeSize },
		{ "List", ListSize },
		{ "Dictionary", DictionarySize }
	};
#>
<#
	string xmlFileName = "PacketRaw.xml";
	string dir = Path.GetDirectoryName(this.Host.TemplateFile);
	string xmlPath = Path.Combine(dir, xmlFileName);

	XmlDocument doc = new XmlDocument();
	doc.Load(xmlPath);

	StringBuilder result = new StringBuilder();

	int packetId = 0;
	XmlNode PacketNode = doc.ChildNodes[0]; // Packets
	foreach(XmlNode ClassNode in  PacketNode.ChildNodes) // Class
	{
		XmlNode ClassNameNode = ClassNode.SelectSingleNode("Name");
		string className = ClassNameNode.InnerText;
		XmlNode VariablesNode = ClassNode.SelectSingleNode("Variables");

		StringBuilder members = new StringBuilder();
		List<string> sizes = new List<string>();
		foreach(XmlNode VarNode in VariablesNode.ChildNodes)
		{
			string type = VarNode.Name;
			string name = VarNode.InnerText;

			// Member Variable Declaration
			switch(type)
			{
				case "List":
				{
					string element = VarNode.Attributes["element"].Value;
					members.Append(String.Format(MemberFormat, $"List<{element}>", name));
					break;
				}
				case "Dictionary":
				{
					string key = VarNode.Attributes["key"].Value;
					string value = VarNode.Attributes["value"].Value;
					members.Append(String.Format(MemberFormat,  $"Dictionary<{key}, {value}>", name));
					break;
				}
				default:
				{
					members.Append(String.Format(MemberFormat, type, name));
					break;
				}

			}

			// Size
			switch(type)
			{
				case "List":
				{
					string element = VarNode.Attributes["element"].Value;
					sizes.Add(String.Format(ListSize, name, element));
					break;
				}
				case "Dictionary":
				{
					string key = VarNode.Attributes["key"].Value;
					string value = VarNode.Attributes["value"].Value;
					sizes.Add(String.Format(DictionarySize, name, key, value));
					break;
				}
				case "string":
				{
					sizes.Add(String.Format(StringSize, name));
					break;
				}
				default:
				{
					sizes.Add(String.Format(TypeToSize[type], name));
					break;
				}
			}
		}

		// 0: 패킷 이름
		// 1: 패킷 사이즈 
		// 2: 패킷 아이디
		// 3: 멤버 변수
		string sizeStr = $"(ushort)({String.Join(" + ", sizes)})";

		string packetClass = String.Format(PacketClassFormat, className, sizeStr, packetId++, members.ToString());
		result.Append(packetClass);
	}
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace ServerLib.Packet
{
	<#= result.ToString() #>
}