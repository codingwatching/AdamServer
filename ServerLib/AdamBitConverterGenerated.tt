<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>

<#

	string intSerializeFunc = 
	@"
		public static byte[] Serialize(int data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string intDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out int data)
		{
			data = BitConverter.ToInt32(buff.Array, buff.Offset);
			size = sizeof(int);
		}
	";

	string uintSerializeFunc = 
	@"
		public static byte[] Serialize(uint data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string uintDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out uint data)
		{
			data = BitConverter.ToUInt32(buff.Array, buff.Offset);
			size = sizeof(uint);
		}
	";

	string shortSerializeFunc = 
	@"
		public static byte[] Serialize(short data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string shortDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out short data)
		{
			data = BitConverter.ToInt16(buff.Array, buff.Offset);
			size = sizeof(short);
		}
	";

	string ushortSerializeFunc = 
	@"
		public static byte[] Serialize(ushort data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string ushortDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out ushort data)
		{
			data = BitConverter.ToUInt16(buff.Array, buff.Offset);
			size = sizeof(ushort);
		}
	";

	string charSerializeFunc = 
	@"
		public static byte[] Serialize(char data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string charDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out char data)
		{
			data = BitConverter.ToChar(buff.Array, buff.Offset);
			size = sizeof(char);
		}
	";

	string longSerializeFunc = 
	@"
		public static byte[] Serialize(long data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string longDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out long data)
		{
			data = BitConverter.ToInt64(buff.Array, buff.Offset);
			size = sizeof(long);
		}
	";

	string ulongSerializeFunc = 
	@"
		public static byte[] Serialize(ulong data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string ulongDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out ulong data)
		{
			data = BitConverter.ToUInt64(buff.Array, buff.Offset);
			size = sizeof(ulong);
		}
	";

	string boolSerializeFunc = 
	@"
		public static byte[] Serialize(bool data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string boolDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out bool data)
		{
			data = BitConverter.ToBoolean(buff.Array, buff.Offset);
			size = sizeof(bool);
		}
	";

	string doubleSerializeFunc = 
	@"
		public static byte[] Serialize(double data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string doubleDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out int size, out double data)
		{
			data = BitConverter.ToDouble(buff.Array, buff.Offset);
			size = sizeof(double);
		}
	";

	string floatSerializeFunc = 
	@"
		public static byte[] Serialize(float data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string floatDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out float data)
		{
			data = BitConverter.ToSingle(buff.Array, buff.Offset);
			size = sizeof(float);
		}
	";

	string stringSerializeFunc = 
	@"
		public static byte[] Serialize(string data)
		{
			return Encoding.UTF8.GetBytes(data);
		}
	";
	string stringDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out string data)
		{
			AdamBitConverter.Deserialize(buff, out int sizeOfLength, out int length);
			size = sizeOfLength;
			data = Encoding.UTF8.GetString(buff.Array, buff.Offset + sizeof(int), length);
			size += Encoding.UTF8.GetByteCount(data);
		}
	";

	string DateTimeSerializeFunc = 
	@"
		public static byte[] Serialize(DateTime data)
		{
			return BitConverter.GetBytes(data.Ticks);
		}
	";
	string DateTimeDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out DateTime data)
		{
			long ticks = BitConverter.ToInt64(buff.Array, buff.Offset);
			data = new DateTime(ticks);
			size = sizeof(long);
		}
	";

	// 0: 원소타입
	string ListSerializeFunc = 
	@"
		public static byte[] Serialize(List<{0}> data)
		{{
			int size = 0;
			int count = 0;
			List<byte[]> buffs = new List<byte[]>();
			foreach(var e in data)
			{{
				byte[] buff = AdamBitConverter.Serialize(e);
				buffs.Add(buff);
				size += buff.Length;
				count++;
			}}

			byte[] resultBuff = new byte[size];

			byte[] lengthBuff = AdamBitConverter.Serialize(count);
			Array.Copy(lengthBuff, 0, resultBuff, cursor, buff.Length);
			int cursor = lengthBuff.Length;

			foreach(byte[] buff in buffs)
			{{
				Array.Copy(buff, 0, resultBuff, cursor, buff.Length);
				cursor += buff.Length;
			}}

			return resultBuff;
		}}
	";
	// 0: 원소타입
	string ListDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out List<{0}> data)
		{{
			data = new List<{0}>();

			AdamBitConverter.Deserialize(buff, out int sizeOfLength, out int length);
			buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeOfLength, buff.Count - sizeOfLength);
			size = sizeOfLength;

			for(int i = 0; i < length; ++i)
			{{
				AdamBitConverter.Deserialize(buff, out int eSize, out {0} element);
				buff = new ArraySegment<byte>(buff.Array, buff.Offset + eSize, buff.Count - eSize);
				size += eSize;
				data.Add(element);
			}}
		}}
	";
	
	// 0: 원소타입
	string DictionarySerializeFunc = 
	@"
		public static byte[] Deserialize(Dictionary<{0}> data)
		{{
			int size = 0;
			int count = 0;
			List<byte[]> buffs = new List<byte[]>();
			foreach(var pair in data)
			{{
				byte[] keyBuff = AdamBitConverter.Serialize(pair.Key);
				byte[] valBuff = AdamBitConverter.Serialize(pair.Value);
				buffs.Add(keyBuff);
				buffs.Add(valBuff);
				size += keyBuff.Length;
				size += valBuff.Length;
				count++;
			}}

			byte[] resultBuff = new byte[size];

			byte[] lengthBuff = AdamBitConverter.Serialize(count);
			Array.Copy(lengthBuff, 0, resultBuff, cursor, buff.Length);
			int cursor = lengthBuff.Length;

			foreach(byte[] buff in buffs)
			{{
				Array.Copy(buff, 0, resultBuff, cursor, buff.Length);
				cursor += buff.Length;
			}}

			return resultBuff;
		}}
	";
	// 0: 원소타입
	string DictionaryDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out Dictionary<{0}> data)
		{{
			data = new Dictionary<{0}>();

			AdamBitConverter.Deserialize(buff, out int sizeOfLength, out int length);
			buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeOfLength, buff.Count - sizeOfLength);
			size = sizeOfLength;

			for(int i = 0; i < length; ++i)
			{{
				AdamBitConverter.Deserialize(buff, out int keySize, out {0} key);
				buff = new ArrySegment<byte>(buff.Array, buff.Offset + keySize, buff.Count - keySize);
				AdamBitConverter.Deserialize(buff, out int valSize, out {0} value);
				buff = new ArrySegment<byte>(buff.Array, buff.Offset + valSize, buff.Count - valSize);
				size += (keySize + valSize);
				data.Add(key, value);
			}}
		}}
	";

	// 0: 클래스 이름
	// 1: 멤버별 Serializations
	// 2: 멤버들 Copy
	string classSerializeFunc = 
	@"
		public static byte[] Serialize({0} data)
		{{
			int size = 0;
			List<byte[]> buffs = new List<byte[]>();

			// Serializations
			{1}

			byte[] buff = new byte[size];

			// Copy
			int cursor = 0;
			{2}

			return buff;
		}}
	
	";
	// 0: 멤버변수 이름
	string classMemberSerialize = 
	@"
			{{
				byte[] memberBuff = AdamBitConverter.Serialize(data.{0});
				size += memberBuff.Length;
				buffs.Add(memberBuff);
			}}
	";
	// 0: 멤버의 인덱스
	string classMemberCopy = 
	@"
			{{
				Array.Copy(buffs[{0}], 0, buff, cursor, buffs[{0}].Length);
				cursor += buffs[{0}].Length;
			}}
	";
	// 0: 클래스 이름
	// 1: 멤버별 Deserializations
	string classDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out {0} data)
		{{
			data = new {0}();
			size = 0;

			// Deserializations
			{1}
		}}
	
	";
	// 0: 멤버변수 이름
	string classMemberDeserialize = 
	@"
			{{
				byte[] memberBuff = AdamBitConverter.Serialize(data.{0});
				size += memberBuff.Length;
			}}
	";

	// 0: PacketId에 따른 case문들
	string packetSerializeFunc = 
	@"
		public static byte[] Serialize(PacketBase packet)
		{{
			ArraySegment<byte> buff = new ArraySegment<byte>(new byte[packet.PacketSize + PacketHeader.Size]);
			PacketHeader header = new PacketHeader(packet);
			byte[] headerBuff = AdamBitConverter.Serialize(header);

			Array.Copy(headerBuff, 0, buff.Array, 0, headerBuff.Length);
			buff = new ArraySegment<byte>(buff.Array, buff.Offset + headerBuff.Length, buff.Count - headerBuff.Length);

			switch(packet.PacketId)
			{{
				{0}

				default:
				{{
					return null;
				}}
			}}
		}}
	";

	// 0: 패킷 클래스이름
	string classSerialize = 
	@"
				case {0}.Id:
				{{
					return AdamBitConverter.Serialize(({0})packet);
				}}
	";

	// 0: PacketId에 따른 case문들
	string packetDeserializeFunc = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out int size, out PacketBase packet)
		{{
			AdamBitConverter.Deserialize(buff, out int headerSize, out PacketHeader header);
			size = headerSize;
			packet = null;

			switch(header.PacketId)
			{{
				{0}

				default:
				{{
					size = 0;
					break;
				}}
			}}
		}}
	";

	// 0: 패킷 클래스이름
	string classDeserialize = 
	@"
				case {0}.Id:
				{{
					{0} packetObject = null;
					AdamBitConverter.Deserialize(buff, out int packetSize, out packetObject);
					packet = packetObject;
					size += packetSize;
					break;
				}}
	";

	Dictionary<string, string> typeToSerialization = new Dictionary<string, string>()
	{
		{ "int", intSerializeFunc },
		{ "uint", uintSerializeFunc },
		{ "short", shortSerializeFunc },
		{ "ushort", ushortSerializeFunc },
		{ "char", charSerializeFunc },
		{ "long", longSerializeFunc },
		{ "ulong", ulongSerializeFunc },
		{ "float", floatSerializeFunc },
		{ "double", doubleSerializeFunc },
		{ "bool", boolSerializeFunc },
		{ "string", stringSerializeFunc },
		{ "DateTime", DateTimeSerializeFunc },
		{ "List", ListSerializeFunc },
		{ "Dictionary", DictionarySerializeFunc },
	};

	Dictionary<string, string> typeToDeserialization = new Dictionary<string, string>()
	{
		{ "int", intDeserializeFunc },
		{ "uint", uintDeserializeFunc },
		{ "short", shortDeserializeFunc },
		{ "ushort", ushortDeserializeFunc },
		{ "char", charDeserializeFunc },
		{ "long", longDeserializeFunc },
		{ "ulong", ulongDeserializeFunc },
		{ "float", floatDeserializeFunc },
		{ "double", doubleDeserializeFunc },
		{ "bool", boolDeserializeFunc },
		{ "string", stringDeserializeFunc },
		{ "DateTime", DateTimeDeserializeFunc },
		{ "List", ListDeserializeFunc },
		{ "Dictionary", DictionaryDeserializeFunc },
	};

	string xmlFileName = "PacketRaw.xml";
	string dir = Path.GetDirectoryName(this.Host.TemplateFile);
	string xmlPath = Path.Combine(dir, xmlFileName);

	XmlDocument doc = new XmlDocument();
	doc.Load(xmlPath);

	StringBuilder result = new StringBuilder();

	// 기본 타입들의 Serialization
	StringBuilder serializeFuncs = new StringBuilder();
	foreach(var pair in typeToSerialization)
	{
	    string type = pair.Key;
        string serializeFunc = pair.Value; 

		if(type == "List" || type == "Dictionary")
		{
			foreach(var pair2 in typeToSerialization)
			{
				if(type == "List" || type == "Dictionary")
					continue;

				string elementType = pair2.Key;
				string containerSerializeFunc = String.Format(serializeFunc, elementType);
				serializeFuncs.Append(containerSerializeFunc);
			}
		}
		else
		{
			serializeFuncs.Append(serializeFunc);
		}
	}

	// 기본 타입들의 Deserialization
	StringBuilder deserializeFuncs = new StringBuilder();
	foreach(var pair in typeToDeserialization)
	{
	    string type = pair.Key;
        string deserializeFunc = pair.Value; 

		if(type == "List" || type == "Dictionary")
		{
			foreach(var pair2 in typeToDeserialization)
			{
				if(type == "List" || type == "Dictionary")
					continue;

				string elementType = pair2.Key;
				string containerDeserializeFunc = String.Format(deserializeFunc, elementType);
				deserializeFuncs.Append(containerDeserializeFunc);
			}
		}
		else
		{
			deserializeFuncs.Append(deserializeFunc);
		}
	}

	// 클래스들의 Serializaion & Deserialization
	XmlNode PacketNode = doc.ChildNodes[0]; // Packets
	StringBuilder packetSerializeSB = new StringBuilder();
	StringBuilder packetDeserializeSB = new StringBuilder();
	StringBuilder classSerializeFuncs = new StringBuilder();
	StringBuilder classDeserializeFuncs = new StringBuilder();
	foreach(XmlNode ClassNode in  PacketNode.ChildNodes) // Class
	{
		XmlNode ClassNameNode = ClassNode.SelectSingleNode("Name");
		string className = ClassNameNode.InnerText;
		XmlNode VariablesNode = ClassNode.SelectSingleNode("Variables");

		packetSerializeSB.Append(String.Format(classSerialize, className));
		packetDeserializeSB.Append(String.Format(classDeserialize, className));

		StringBuilder classMemberSerializations = new StringBuilder();
		StringBuilder classMemberCopies = new StringBuilder();
		StringBuilder classMemberDeserializations = new StringBuilder();
		int index = 0;
		foreach(XmlNode VarNode in VariablesNode.ChildNodes)
		{
			string type = VarNode.Name;
			string name = VarNode.InnerText;

			classMemberSerializations.Append(String.Format(classMemberSerialize, name));
			classMemberCopies.Append(String.Format(classMemberCopy, index++));
			classMemberDeserializations.Append(String.Format(classMemberDeserialize, name));
		}

		classSerializeFuncs.Append(String.Format(classSerializeFunc, className, classMemberSerializations.ToString(), classMemberCopies.ToString()));
		classDeserializeFuncs.Append(String.Format(classDeserializeFunc, className, classMemberDeserializations.ToString()));
		
		
	}

	result.Append(String.Format(packetSerializeFunc, packetSerializeSB.ToString()));
	result.Append(String.Format(packetDeserializeFunc, packetDeserializeSB.ToString()));
	result.Append(serializeFuncs.ToString());
	result.Append(classSerializeFuncs.ToString());
	result.Append(deserializeFuncs.ToString());
	result.Append(classDeserializeFuncs.ToString());
#>

/**************************************

	이 파일은 자동 생성되는 파일입니다.
		절대 직접 수정하지마세요.

**************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace ServerLib.Packet
{
	internal class AdamBitConverter
	{
		public static byte[] Serialize(PacketHeader header)
		{
			byte[] buff = new byte[PacketHeader.Size];

			byte[] packetSizeBuff = BitConverter.GetBytes(header.PacketSize);
			Array.Copy(packetSizeBuff, 0, buff, 0, sizeof(ushort));
			byte[] packetIdBuff = BitConverter.GetBytes(header.PacketId);
			Array.Copy(packetIdBuff, 0, buff, sizeof(ushort), sizeof(ushort));

			return buff;
		}

		public static void Deserialize(ArraySegment<byte> buff, out int size, out PacketHeader header)
		{
			header = new PacketHeader();
			size = PacketHeader.Size;
			header.PacketSize = BitConverter.ToUInt16(buff.Array, buff.Offset);
			header.PacketId = BitConverter.ToUInt16(buff.Array, buff.Offset + sizeof(ushort));
		}
		
		<#= result.ToString() #>

	}
}