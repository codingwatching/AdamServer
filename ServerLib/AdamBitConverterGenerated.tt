<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>

<#
	string intSerializeFunc = 
	@"
		public byte[] Serialize(int data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string intDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out int data)
		{
			data = BitConverter.ToInt32(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string intSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(int));
		cursor += sizeof(int);
	";
	// 0: 변수이름
	string intDeserialization = 
	@"
		{0} = BitConverter.ToInt32(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(int), buff.Count - sizeof(int));
	";

	string uintSerializeFunc = 
	@"
		public byte[] Serialize(uint data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string uintDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out uint data)
		{
			data = BitConverter.ToUInt32(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string uintSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(uint));
		cursor += sizeof(uint);
	";
	// 0: 변수이름
	string uintDeserialization = 
	@"
		{0}= BitConverter.ToUInt32(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(uint), buff.Count - sizeof(uint));
	";

	string shortSerializeFunc = 
	@"
		public byte[] Serialize(short data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string shortDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out short data)
		{
			data = BitConverter.ToInt16(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string shortSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(short));
		cursor += sizeof(short);
	";
	// 0: 변수이름
	string shortDeserialization = 
	@"
		{0}= BitConverter.ToInt16(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(short), buff.Count - sizeof(short));
	";

	string ushortSerializeFunc = 
	@"
		public byte[] Serialize(ushort data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string ushortDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out ushort data)
		{
			data = BitConverter.ToUInt16(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string ushortSerialization = 
	@"
		byte[] memberBuff = AdamBitConverter.Serialize(buff);
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(ushort);
		cursor += sizeof(ushort);
	";
	// 0: 변수이름
	string ushortDeserialization = 
	@"
		{0}= BitConverter.ToUInt16(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(ushort), buff.Count - sizeof(ushort));
	";

	string charSerializeFunc = 
	@"
		public byte[] Serialize(char data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string charDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out char data, out int size)
		{
			data = BitConverter.ToChar(buff.Array, buff.Offset);
			size = sizeof(char);
		}
	";
	// 0: 변수이름
	string charSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(char));
		cursor += sizeof(char);
	";
	// 0: 변수이름
	string charDeserialization = 
	@"
		{0} = BitConverter.ToChar(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(char), buff.Count - sizeof(char));
	";

	string longSerializeFunc = 
	@"
		public byte[] Serialize(long data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string longDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out long data)
		{
			data = BitConverter.ToInt64(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string longSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(long));
		cursor += sizeof(long);
	";
	// 0: 변수이름
	string longDeserialization = 
	@"
		{0} = BitConverter.ToInt64(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(long), buff.Count - sizeof(long));
	";

	string ulongSerializeFunc = 
	@"
		public byte[] Serialize(ulong data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string ulongDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out ulong data)
		{
			data = BitConverter.ToUInt64(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string ulongSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(ulong));
		cursor += sizeof(ulong);
	";
	// 0: 변수이름
	string ulongDeserialization = 
	@"
		{0} = BitConverter.ToUInt64(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(ulong), buff.Count - sizeof(ulong));
	";

	string boolSerializeFunc = 
	@"
		public byte[] Serialize(bool data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string boolDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out bool data)
		{
			data = BitConverter.ToBoolean(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string boolSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(bool));
		cursor += sizeof(bool);
	";
	// 0: 변수이름
	string boolDeserialization = 
	@"
		{0} = BitConverter.ToBolean(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(bool), buff.Count - sizeof(bool));
	";

	string doubleSerializeFunc = 
	@"
		public byte[] Serialize(double data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string doubleDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out double data)
		{
			data = BitConverter.ToDouble(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string doubleSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(double));
		cursor += sizeof(double);
	";
	// 0: 변수이름
	string doubleDeserialization = 
	@"
		{0} = BitConverter.ToDouble(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(double), buff.Count - sizeof(double));
	";

	string floatSerializeFunc = 
	@"
		public byte[] Serialize(float data)
		{
			return BitConverter.GetBytes(data);
		}
	";
	string floatDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, out float data)
		{
			data = BitConverter.ToSingle(buff.Array, buff.Offset);
		}
	";
	// 0: 변수이름
	string floatSerialization = 
	@"
		byte[] memberBuff = BitConverter.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, sizeof(float));
		cursor += sizeof(float);
	";
	// 0: 변수이름
	string floatDeserialization = 
	@"
		{0} = BitConverter.ToSingle(buff.Array, buff.Offset);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + sizeof(float), buff.Count - sizeof(float));
	";

	string stringSerializeFunc = 
	@"
		public byte[] Serialize(string data)
		{
			return Encoding.UTF8.GetBytes(data);
		}
	";
	string stringDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, int size, out string data)
		{
			data = Encoding.UTF8.GetString(buff.Array, buff.Offset, size);
		}
	";
	// 0: 변수이름
	string stringSerialization = 
	@"
		byte[] memberBuff = Encoding.UTF8.GetBytes({0});
		Array.Copy(memberBuff, 0, buff.Array, buff.Offset + cursor, memberBuff.Length);
		cursor += memberBuff.Length;
	";
	// 0: 변수이름
	string stringDeserialization = 
	@"
		byte[] lengthBuff = AdamBitConverter.Deserialize(buff, out int length);
		{0} = Encoding.UTF8.GetString(buff.Array, buff.Offset, length);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + (sizeof(int) + Encoding.UTF8.GetBytesCount({0})), buff.Count - (sizeof(int) + Encoding.UTF8.GetBytesCount({0})));
	";

	// 0: 원소타입
	string ListSerializeFunc = 
	@"
		public byte[] Serialize(List<{0}> data)
		{{
			int size = 0;
			int count = 0;
			List<byte[]> buffs = new List<byte[]>();
			foreach({0} e in data)
			{
				byte[] buff = AdamBitConverter.Serialize(e);
				buffs.Add(buff);
				size += buff.Length;
				count++;
			}

			byte[] lengthBuff = AdamBitConverter.Serialize(count);
			Array.Copy(lengthBuff, 0, resultBuff, cursor, buff.Length);
			int cursor += lengthBuff.Length;

			byte[] resultBuff = new byte[size];
			foreach(byte[] buff in buffs)
			{
				Array.Copy(buff, 0, resultBuff, cursor, buff.Length);
				cursor += buff.Length;
			}

			return resultBuff;
		}}
	";
	// 0: 원소타입
	string ListDeserializeFunc = 
	@"
		public void Deserialize(ArraySegment<byte> buff, int size, out List<{0}> data)
		{
			AdamBitConverter.Deserialize(buff, out int length);
			for(int i = 0; i < length; ++i)
			{
				AdamBitConverter.Deserialize(
			}
		
			data = Encoding.UTF8.GetString(buff.Array, buff.Offset, size);
		}
	";
	// 0: 변수이름
	string ListSerialization = 
	@"
		byte[] lengthBuff = AdamBitConverter.Serialize({0}.Count);
		Array.Copy(lenghtBuff, 0, buff.Array, buff.Offset + cursor, lengthBuff.Length);
		cursor += lengthBuff.Length;
		foreach(var e in {0})
		{{
			byte[] eBuff = AdamBitConverter.Serialize(e, out int eSize);
			Array.Copy(eBuff, 0, buff.Array, buff.Offset + cursor, eSize);
			cursor += eSize;
		}}
	";
	// 0: 변수이름
	string stringDeserialization = 
	@"
		byte[] lengthBuff = AdamBitConverter.Deserialize(buff, out int length);
		{0} = Encoding.UTF8.GetString(buff.Array, buff.Offset, length);
		buff = new ArraySegment<byte>(buff.Array, buff.Offset + (sizeof(int) + Encoding.UTF8.GetBytesCount({0})), buff.Count - (sizeof(int) + Encoding.UTF8.GetBytesCount({0})));
	";

	// 0: 변수이름
	string DictionarySerialization = 
	@"
		byte[] lengthBuff = AdamBitConverter.Serialize({0}.Count, out int lenSize);
		Array.Copy(lenghtBuff, 0, buff.Array, buff.Offset + cursor, lenSize);
		cursor += lenSize;
		foreach(var pair in {0})
		{{
			var key = e.Key;
			var value = e.Value;
			byte[] keyBuff = AdamBitConverter.Serialize(key, out int keySize);
			byte[] valueBuff = AdamBitConverter.Serialize(value, out int valueSize);
			Array.Copy(keyBuff, 0, buff.Array, buff.Offset + cursor, keySize);
			Array.Copy(valueBuff, 0, buff.Array, buff.Offset + cursor, valueSize);
			cursor += keySize + valueSize;
		}}
		
	";
#>

<#  
	Dictionary<string, string> typeToSerialization = new Dictionary<string, string>()
	{
		{ "int", intSerialization },
		{ "uint", uintSerialization },
		{ "short", shortSerialization },
		{ "ushort", ushortSerialization },
		{ "char", charSerialization },
		{ "long", longSerialization },
		{ "ulong", ulongSerialization },
		{ "float", floatSerialization },
		{ "double", doubleSerialization },
		{ "bool", boolSerialization },
		{ "string", stringSerialization },
		{ "List", ListSerialization },
		{ "Dictionary", DictionarySerialization },
	};

	Dictionary<string, int> typeToTypeSize = new Dictionary<string,int>()
	{
		{ "int", sizeof(int) },
		{ "uint", sizeof(uint) },
		{ "short", sizeof(short) },
		{ "ushort", sizeof(ushort) },
		{ "char", sizeof(char) },
		{ "long", sizeof(long) },
		{ "ulong", sizeof(ulong) },
		{ "float", sizeof(float) },
		{ "double", sizeof(double) },
		{ "bool", sizeof(bool) },
	};
#>

<#  
	// 0: 타입이름
	// 1: 시리얼라이즈 몸체
	string SerializeFunctionFormat = 
	@"
		public static byte[] Serialize({0} data)
		{{
			int cursor = 0;
			ArraySegment<byte> buff = new ArraySegment<byte>(new byte[data.PacketSize]);

			{1}

			return buff.Array;
		}}
	";

	// 0: 변수이름
	string SerializeUnit = 
	@"
			{{
				byte[] memberBuff = Serialize(data.{0});
				Array.Copy(memberBuff, 0, buff.Array, buff.Count + cursor, memberBuff.Length);
				cursor += memberBuff.Length;
			}}
	";

	// 0: 타입이름
	// 1: 디시리얼라이즈 몸체
	string DeserializeFunctionFormat = 
	@"
		public static void Deserialize(ArraySegment<byte> buff, out {0} data)
		{{
			data = new {0}();

			{1}
		}}
	";

	// 0: 변수이름
	// 1: 디시리얼라이즈 바이트 수
	string DeserializeUnit = 
	@"
			{{
				Deserialize(buff, out data.{0});
				buff = new ArraySegment(buff.Array, buff.Offset + {1}, buff.Count - {1});
			}}
	";

	// 0: 변수이름
	string DeserializeVariableUnit = 
	@"
			{{
				Deserialize(buff, out int length);
				Deserialize(buff, length, out data.{0});
				buff = new ArraySegment(buff.Array, buff.Offset + (length + sizeof(int)), buff.Count - (length + sizeof(int)));
			}}
	";

#>

<#
	string AppendTab(string str, int tabCount)
	{
		string result = String.Copy(str);
		result.Replace("\t", "");
		string tabs = "";
		for(int i = 0 ; i < tabCount; ++i) tabs += "/t";
		result.Replace("\n", "\n" + tabs);

		return result;
	}
#>


<#  
	string xmlFileName = "PacketRaw.xml";
	string dir = Path.GetDirectoryName(this.Host.TemplateFile);
	string xmlPath = Path.Combine(dir, xmlFileName);

	XmlDocument doc = new XmlDocument();
	doc.Load(xmlPath);

	StringBuilder result = new StringBuilder();

	// 기본 타입들의 Serializaion & Deserialization
	



	// 클래스들의 Serializaion & Deserialization
	int packetId = 0;
	XmlNode PacketNode = doc.ChildNodes[0]; // Packets
	foreach(XmlNode ClassNode in  PacketNode.ChildNodes) // Class
	{
		XmlNode ClassNameNode = ClassNode.SelectSingleNode("Name");
		string className = ClassNameNode.InnerText;
		XmlNode VariablesNode = ClassNode.SelectSingleNode("Variables");

		StringBuilder ssb = new StringBuilder();
		StringBuilder dsb = new StringBuilder();
		foreach(XmlNode VarNode in VariablesNode.ChildNodes)
		{
			string type = VarNode.Name;
			string name = VarNode.InnerText;

			ssb.Append(String.Format(SerializeUnit, name));

			if(typeToTypeSize.Keys.Contains(type))
			{
				dsb.Append(String.Format(DeserializeUnit, name, typeToTypeSize[type])); 
			}
			else
			{
				dsb.Append(String.Format(DeserializeVariableUnit, name)); 
			}

		}
		string serializeFunc = String.Format(SerializeFunctionFormat, ClassNameNode.InnerText, ssb.ToString());
		string deserializeFunc = String.Format(DeserializeFunctionFormat, ClassNameNode.InnerText, dsb.ToString());

		result.Append(serializeFunc);
		result.Append(deserializeFunc);
		
		
	}
#>

/**************************************

	이 파일은 자동 생성되는 파일입니다.
		절대 직접 수정하지마세요.

**************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace ServerLib.Packet
{
	internal class AdamBitConverter
	{
		
		<#= result.ToString() #>

	}
}